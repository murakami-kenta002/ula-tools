// SPDX-License-Identifier: Apache-2.0

//*
// Copyright (c) 2024  Panasonic Automotive Systems, Co., Ltd.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.29.0
// source: proto/dwm.proto

package dwm

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DwmService_DwmSetSystemLayout_FullMethodName  = "/dwm.DwmService/DwmSetSystemLayout"
	DwmService_DwmSetLayoutCommand_FullMethodName = "/dwm.DwmService/DwmSetLayoutCommand"
)

// DwmServiceClient is the client API for DwmService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DwmServiceClient interface {
	DwmSetSystemLayout(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Response, error)
	DwmSetLayoutCommand(ctx context.Context, in *SetLayoutCommandRequest, opts ...grpc.CallOption) (*Response, error)
}

type dwmServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDwmServiceClient(cc grpc.ClientConnInterface) DwmServiceClient {
	return &dwmServiceClient{cc}
}

func (c *dwmServiceClient) DwmSetSystemLayout(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, DwmService_DwmSetSystemLayout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dwmServiceClient) DwmSetLayoutCommand(ctx context.Context, in *SetLayoutCommandRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, DwmService_DwmSetLayoutCommand_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DwmServiceServer is the server API for DwmService service.
// All implementations must embed UnimplementedDwmServiceServer
// for forward compatibility
type DwmServiceServer interface {
	DwmSetSystemLayout(context.Context, *Empty) (*Response, error)
	DwmSetLayoutCommand(context.Context, *SetLayoutCommandRequest) (*Response, error)
	mustEmbedUnimplementedDwmServiceServer()
}

// UnimplementedDwmServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDwmServiceServer struct {
}

func (UnimplementedDwmServiceServer) DwmSetSystemLayout(context.Context, *Empty) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DwmSetSystemLayout not implemented")
}
func (UnimplementedDwmServiceServer) DwmSetLayoutCommand(context.Context, *SetLayoutCommandRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DwmSetLayoutCommand not implemented")
}
func (UnimplementedDwmServiceServer) mustEmbedUnimplementedDwmServiceServer() {}

// UnsafeDwmServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DwmServiceServer will
// result in compilation errors.
type UnsafeDwmServiceServer interface {
	mustEmbedUnimplementedDwmServiceServer()
}

func RegisterDwmServiceServer(s grpc.ServiceRegistrar, srv DwmServiceServer) {
	s.RegisterService(&DwmService_ServiceDesc, srv)
}

func _DwmService_DwmSetSystemLayout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DwmServiceServer).DwmSetSystemLayout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DwmService_DwmSetSystemLayout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DwmServiceServer).DwmSetSystemLayout(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DwmService_DwmSetLayoutCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetLayoutCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DwmServiceServer).DwmSetLayoutCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DwmService_DwmSetLayoutCommand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DwmServiceServer).DwmSetLayoutCommand(ctx, req.(*SetLayoutCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DwmService_ServiceDesc is the grpc.ServiceDesc for DwmService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DwmService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dwm.DwmService",
	HandlerType: (*DwmServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DwmSetSystemLayout",
			Handler:    _DwmService_DwmSetSystemLayout_Handler,
		},
		{
			MethodName: "DwmSetLayoutCommand",
			Handler:    _DwmService_DwmSetLayoutCommand_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/dwm.proto",
}
